# test postgres container
volumes:
  program-engineering-postgres-database:

services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    #   interval: 2s
    #   timeout: 2s
    #   retries: 5
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  #     ME_CONFIG_BASICAUTH: false

  users_db:
    image: postgres:14
    restart: always
    shm_size: 10mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # POSTGRES_DB: users
      # POSTGRES_HOST_AUTH_METHOD: trust # https://stackoverflow.com/a/78540259

    # https://docs.docker.com/engine/storage/volumes/#start-a-container-with-a-volume
    # If you start a container with a volume that doesn't yet exist,
    # Docker creates the volume for you.
    # https://docs.docker.com/engine/storage/volumes/#use-a-volume-with-docker-compose
    # Running docker compose up for the first time creates a volume.
    # Docker reuses the same volume when you run the command subsequently.
    volumes: #[<volume-name>:]<mount-path>[:opts]
      - program-engineering-postgres-database:/var/lib/postgresql/data
    ports:
      - 5004:5432
    healthcheck: # https://stackoverflow.com/a/79403018
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: [ "/bin/bash", "-c", "
      docker-entrypoint.sh postgres &
      until pg_isready -U postgres; do sleep 3; done &&
      psql -U postgres -c 'DROP DATABASE IF EXISTS users;' || true &&
      psql -U postgres -c 'DROP DATABASE IF EXISTS passwords;' || true &&
      psql -U postgres -c 'CREATE DATABASE users;' || true &&
      psql -U postgres -c 'CREATE DATABASE passwords;' || true &&
      wait"
    ]
