# https://stackoverflow.com/a/30173220
# docker exec -it <mycontainer> bash
# https://stackoverflow.com/a/44769468
# docker run -it image_name sh

volumes:
  postgres14-volume:
  mongo5.0-volume:

services:
  cache:
    image: redis
    command: redis-server
    ports:
      - 6379:6379
    volumes:
      - ./src/database/config/redis.conf:/usr/local/etc/redis/redis.conf
    # https://stackoverflow.com/a/70706628
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "redis", "--raw", "incr", "ping" ]

  # https://stackoverflow.com/questions/76201574/how-to-change-mongodb-password-in-docker-compose#76207336
  messages_db:
    image: mongo:5.0
    # https://www.baeldung.com/ops/docker-compose-restart-policies
    restart: unless-stopped
    env_file: .env
    healthcheck:
      # https://stackoverflow.com/a/74709736
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - mongo5.0-volume:/data/db

  users_db:
    image: postgres:14
    restart: unless-stopped
    shm_size: 10mb
    env_file: .env
    volumes:
      - postgres14-volume:/var/lib/postgresql/data
    ports:
      - 5004:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && cat /healthy.txt"]
      interval: 10s
      timeout: 5s
      retries: 5
    # one db for less memory usage and startup time
    # https://stackoverflow.com/questions/46668233/multiple-databases-in-docker-and-docker-compose#62944006
    entrypoint: [ "/bin/bash", "-c", "
      docker-entrypoint.sh postgres &
      until pg_isready -U postgres; do sleep 3; done &&
      psql -U postgres -c 'DROP DATABASE IF EXISTS users;' || true &&
      psql -U postgres -c 'DROP DATABASE IF EXISTS passwords;' || true &&
      psql -U postgres -c 'CREATE DATABASE users;' || true &&
      psql -U postgres -c 'CREATE DATABASE passwords;' || true &&
      echo done > /healthy.txt &&
      wait"
    ]

  init-users_db:
    build: .
    command: python ./src/database/init/init.py
    env_file: .env
    depends_on:
      users_db:
        # https://stackoverflow.com/questions/65778431/using-depends-on-doesnt-start-required-container-but-starts-containers-dependi#76021926
        condition: service_healthy
      messages_db:
        condition: service_healthy
      cache:
        condition: service_healthy

  auth-service:
    build: .
    command: python -m uvicorn --host 0.0.0.0 --port 5001 --reload src.auth.auth-service:app
    ports:
      - 5001:5001
    env_file: .env
    depends_on:
      users_db:
        condition: service_healthy
      cache:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src/


  user-service:
    build: .
    command: python -m uvicorn --host 0.0.0.0 --port 5002 --reload src.user.user-service:app
    ports:
      - 5002:5002
    env_file: .env
    depends_on:
      users_db:
        condition: service_healthy
      cache:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src/


  message-service:
    build: .
    command: python -m uvicorn --host 0.0.0.0 --port 5003 --reload src.message.message-service:app
    ports:
      - 5003:5003
    # https://stackoverflow.com/a/61357756
    env_file: .env
    depends_on:
      messages_db:
        condition: service_healthy
      cache:
        condition: service_healthy

    # https://docs.docker.com/compose/gettingstarted/#step-4-edit-the-compose-file-to-use-compose-watch
    # docker compose up --watch
    develop:
      watch:
        # copies when something is updated, but image is not changed
        # - next docker compose up will be the same
        # https://docs.docker.com/compose/how-tos/file-watch/
        - action: sync # don't need to sync+restart - uvicorn restarts
          path: ./src
          target: /app/src/
